version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-social-network
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306" # Expose MySQL port
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - sonns-network

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5
    container_name: keycloak-social-network
    environment:
      KC_DB: mysql
      KC_DB_URL_HOST: mysql
      KC_DB_URL_PORT: 3306
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: root
      KC_DB_PASSWORD: password
      KC_HOSTNAME: localhost
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password

    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    networks:
      - sonns-network
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper-social-network
    ports:
      - "2181:2181"
    networks:
      - sonns-network

  kafka:
    container_name: kafka-social-network
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      - zookeeper
    networks:
      - sonns-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-social-network
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - sonns-network
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch-social-network
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1.0"
        reservations:
          memory: 2g
          cpus: "1.0"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - sonns-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana-social-network
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - sonns-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: logstash-social-network
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - sonns-network
    command: >
      bash -c "
        echo '
        input {
          tcp {
            port => 5044
            codec => json_lines
          }
        }
        output {
          elasticsearch {
            hosts => [\"http://elasticsearch:9200\"]
            index => \"spring-logs\"
          }
        }
        ' > /usr/share/logstash/pipeline/logstash.conf && /usr/local/bin/docker-entrypoint"

  api-gateway:
    build: ./api-gateway
    image: siwson/social_network_api_gateway:latest
    container_name: api-gateway
    ports:
      - "8888:8080"
    depends_on:
      - auth-service
      - user-service
    networks:
      - sonns-network
    volumes:
      - ./docker/libs/opentelemetry-javaagent.jar:/opentelemetry-javaagent.jar

  auth-service:
    build: ./AuthService/AuthService-application
    image: siwson/social_network_auth_service:latest
    container_name: auth-service
    ports:
      - "8091:8080"
    depends_on:
      - mysql
    networks:
      - sonns-network
    volumes:
      - ./docker/libs/opentelemetry-javaagent.jar:/opentelemetry-javaagent.jar

  user-service:
    build: ./UserService/UsersService-application
    image: siwson/social_network_user_service:latest
    container_name: user-service
    ports:
      - "8082:8080"
    depends_on:
      - mysql
    networks:
      - sonns-network
    volumes:
      - ./docker/libs/opentelemetry-javaagent.jar:/opentelemetry-javaagent.jar


volumes:
  mysql_data:
  elasticsearch_data:

networks:
  sonns-network:
    driver: bridge
    name: sonns-network
